//NOTE to change the width of Aside use $sidebar-width in App.scss file $sidebar-width: 270px !default;
import { observer } from 'mobx-react-lite';
import React, { useEffect, useRef, useState } from 'react';
import { ProSidebar, SidebarHeader, SidebarFooter, SidebarContent,Menu, MenuItem, SubMenu } from 'react-pro-sidebar';
import { Button,  Icon,  ItemMeta,  Label } from 'semantic-ui-react';
import { useStore } from '../stores/store';
import { Link} from 'react-router-dom';
import { VscClearAll } from "react-icons/vsc";
import { RSA_NO_PADDING } from 'constants';
import isToday from 'date-fns/isToday';
import 'react-pro-sidebar/dist/css/styles.css'
import './Sidebar.scss'; //custom CSS file for styling
import { BooleanSchema } from 'yup';

export default observer (function Aside (){
  const {userStore:{user, logout, isAdmin, isLoggedIn, isTA}} = useStore(); //userStore: {isLoggedIn}
  const { commonStore } = useStore();
  //  let imageUrl=`${process.env.REACT_APP_API_URL}/ActiveDirectory/GetADImage?pid=${commonStore.pid}`;
  // if (commonStore.pid == null || commonStore.pid == 'null') imageUrl = '/assets/user.png';
  //const [collapsed, setCollapsed] = useState(false);
  const handleClick = (checked) => {
    //setCollapsed(checked);
    commonStore.setSideBar(checked);
  };
  const [ictoMenu, SetIctoMenu]         = useState(false);
  const [qipMenu, SetQipMenu]           = useState(false);
  const [netbrainMenu, SetNetbrainMenu] = useState(false);
  const [snowMenu, SetSnowMenu]         = useState(false);
  const [azInventory, SetAzInventory]   = useState(false);
  const [azOnprem, SetAzOnprem]         = useState(false);
  const [azOffprem, SetAzOffprem]       = useState(false);
  const [zabbixAlarms, SetZabbixAlarms] = useState(false);
  const [azAlarms, SetAzAlarms]         = useState(false);
  const [zayoLinks, SetZayoLinks]       = useState(false);
  const [o365Menu, SetO365Menu]         = useState(false);
  const [o365SLA, SetO36SLA]            = useState(false);
  const [qipReports, SetQipReports]     = useState(false);
  const [f5Tools, SetF5Tools]               = useState(false);
  const [aws, SetAws]                       = useState(false);
  const [splunk, SetSplunk]                 = useState(false);
  const [complianceMenu, SetComplianceMenu] = useState(false);
  const [mtuMenu, SetMtuMenu]               = useState(false);
  const [qosMenu, SetQosMenu]               = useState(false);
  const [capacityManagement, SetCapacityManagement]  = useState(false);
  const [agnits, SetAgnits]               = useState(false);
  const [mariaDB, SetMariaDB]             = useState(false);
  const [wan, setWan]                                       = useState(false);
  const [internet, setInternet]                             = useState(false);
  const [man, setMan]                                       = useState(false);
  const [proxy, setProxy]                                   = useState(false);
  const [f5Open, setF5Open]                                 = useState(false);
  const [inventory, setInventory]                           = useState(false);
  const [agntitOnboarding, setAgnitsOnboarding]             = useState(false);
  const [zabbixMaintenanceMenu, SetZbbixMaintenanceMenu]    = useState(false);
  const [wifi, SetWifi]    = useState(false);
  const [zabOpen, setZabOopen]                              = useState(false);
  const [networkTrafficMonitoring, SetNetworkTrafficMonitoring] = useState(false);

  const [serviceDashboard, SetServiceDashboard]        = useState(false);
  const [networkTools, SetNetworkTools]        = useState(false);
  const [pingFolder, setPingFolder]        = useState(false);
  const [cloudDashboards, setCloudDashboards]        = useState(false);




  const [activeMenuItem2, setActiveMenuItem2] = useState(null);


  let angleRight = <Icon name='folder' style={{fontSize: '11px'}} /> ;
  let angleDown =  <Icon name='folder open' style={{fontSize: '11px'}}  /> ;
  const [menuIcon, SetMenuIcon] = useState<JSX.Element>(angleRight);

  let mtop = -3
  let mrenuSize = 13;
  let itemSize = 13;

  const menuItemRef = useRef(null);

  //testing 
//todo continue here 
let MyMenu: subMenu[] = [
  {

  "menuItems" : [

        {
          "id":1,
          "name": "p1",
          "path": "/test1"
        },
        {
          "id":2,
          "name": "p2",
          "path": "/test2"
        },        
    ]
  }
]


//label: string, open : boolean, setAction, MenuItems: {} []
function RenderMenu(){
  let kk =0;
  return  MyMenu.map( (sbm: subMenu) : JSX.Element[] => {
    return sbm.menuItems.map( (item: menuItem )=>{
      // item ={...item, open : false} // initialize open = false
      return (
          <SubMenu  
            key = {kk++}
            style={{fontSize:`${mrenuSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}}  
            title={item.name}
            open= {item.open} 
            onOpenChange= {(open: boolean)=>{  item.setAction &&  item.setAction(!open)}}
          >           
          </SubMenu>

      )
    })

  })

}


  useEffect ( () => {


    //need to add this to menu item : ref={menuItemRef}  

      const url = window.location.pathname;
      const activeMenuItem = url.substring(url.lastIndexOf('/'));
      setActiveMenuItem2(url.substring(url.lastIndexOf('/') + 1).trimEnd());
      console.log("activeMenuItem[", activeMenuItem + "]");

      //var mm = RenderMenu();


      //!! building the expand section 

      let ChangeManagement = ["NotifyRFCs", "CheckMaintenanceWindow", "WeekendLogs", "ImpGroupsMembers", "ImpGroupsManagers"];
      let NetworkTrafficMonitoring = ["TownHall", "CloudServeBorderRouters", "Internet", "ProxyP", "WebProxies", "Sdwan", "ManLinks"];
      let F5Open = ["F5OnBoarding", "F5Subnets", "F5TopICTOsByLtm", "F5OfflineByLtm","F5MonthlyStats","F5SearchRFCsDescriptions"];
      let inventory= ["AgnitsInterfacesInventory", "DevicesPortUtilization"]

      let AzureInventory= ["AzureSubscriptions","AzureVirtualMachines","AzureVMScaleSets","AzureSubnets","AzureRoutingTables","AzureVnetGateways","AzureVnetPeers2","AzureDnsPrivateZones","AzureLoadBalancers","AzurePrivateEndPoints"]
      let AzureOnPremMonitoring= ["MonitorWestEurope","MonitorNorthEurope","MonitorEastUS","MonitorCentralUS","MonitorEastAsia","MonitorSouthEastAsia","MonitorIndia","GridVMsIPSLA","CrossSitesIPSLA"]
      let AzureOffPremMonitoring= ["AzureOffpremMonitoringRoW","AzureOffpremMonitoringCH","GridConnectionMonitors"]
      let AzureLogs= ["AzureVirtualWanLogs","AzureAlarmsLatest","AzureAlarmsDefinition","AzureAlarmsConnectionMonitors"]
      let ZayoLinks= ["ZayoLinks","ZayoLinks2","ZayoMonitoringOnPrem"]
      // let AzureOnPremMonitoring= ["MonitorWestEurope","","","","","","","","","","","","","","",""]
      //TODO CONTINUE HERE>.>>

      let ZabbixAlarms= ["ZabbixRepeatLogs", "ZabbixDailyUniqueLogs", "LogsTracking"]
      let MaintenanceWindows= ["MaintenanceLogs", "MaintenancewindowByRFC", "ZabbixLogsByDevices","CreateZabbixMaintenanceWindow"]

      let PingTraceSubnets = ["GrafanaInterfaces", "GrafanaHostsCPU", "GrafanaHostsChecks", "PingSubnets", "PingHosts", "Traceroute","MultiTraceroute","SubnetRoutingChecker", "SubnetUnifiedCheck", "DiffTool","SplunkLogs", "Syslogs"];

      let Agnits = ["NDCRGetInfoBySwitch", "AgnitsInventory", "ZabbixInventory", "AgnitsDevicesNotFoundInZabbix","VerizonInventory", "SnmpLocation",];
      let F5Tools =["F5RFCsByDate", "F5ApiLogs", "SnowF5UnlclosedRFCs", "F5GetSubnetsByLB", "TestTcpConnection", "F5Nodes", "GtmSyncStatus", "GtmSyncStatusLive", "F5GetVSByLB","F5GetVSwithSinglePoolMember"]; 
      let QIPTools =["SnowIPAMUnlclosedRFCs","QipChecker2","QipChecker2","QipLookup","IP2Name","Name2IP"];
      let QipReports =["QipDiffNetbrain","QipSubnetReport","DataOneSubnetReport","QipHostReport"];
      
      let Compliance =["SplunkAgnits","SearchSplunkAgnits","ManWanEncryptionReport","ManEncryptionBTReport","NetbrainUptimes","N5KSyslogChecks","GetEigrpNeighs","NetbrainAgoraChecks","CdpLinks","PortFastChecks","TelnetReport","NetbrainGetMTU","NetbrainGetCDPNeighbors","NetbrainGetCDPNeighborsByDomain"];
      
      let Servicenow =["SnowRfcSearch","SnowIncSearch","SnowNatsOpenIncs"];
      let IctoInfo =["GetPSLInfoByIcto","GetIctoInfoById","GetIctoInfoByIp","GetIctoSupportInfoByIp","getPSLInfoByIp"];
      let M365Monitoring = ["M365MonitoringDashboards","CloudRFCs","CloudIncidents","O365BgpLearntRoutes","O365BgpRouteMpas","IpSlaParser"]
      let IPSLALatency =["O365IPSlaAPAC","O365IPSlaUK","O365IPSlaUS"]

      let CloudDashboards =["AzureCircuits","NeworkDiagrams","ThousandEyes"]
      let CapacityManagementExpressCircuits =["CapacityManagementExpressCircuits"]


      if (PingTraceSubnets.includes(" /PingSubnets")){
        debugger;

      }

      if (activeMenuItem && activeMenuItem.includes("Netbrain")){
        SetNetworkTools(true);
        SetNetbrainMenu(true);     
      }
      else if (activeMenuItem && ZabbixAlarms.some(v => activeMenuItem.includes(v))) {
        SetZabbixAlarms(true);
      }       
      //!!Azure Inventory
      else if (activeMenuItem && AzureInventory.some(v => activeMenuItem.includes(v))) {
        setCloudDashboards(true);
        SetAzInventory(true);
      }  
      else if (activeMenuItem && MaintenanceWindows.some(v => activeMenuItem.includes(v))) {
        SetZabbixAlarms(true);
        SetZbbixMaintenanceMenu(true);
      }       
      //!!ChangeManagement      
      else if (activeMenuItem && ChangeManagement.some(v => activeMenuItem.includes(v))) {
        SetServiceDashboard(true);
        setZabOopen(true);
      } 
      //!!F5Open
      else if (activeMenuItem && F5Open.some(v => activeMenuItem.includes(v))) {
        SetServiceDashboard(true);
        setF5Open(true);
      }
      //!!NetworkTrafficMonitoring
      else if (activeMenuItem && NetworkTrafficMonitoring.some(v => activeMenuItem.includes(v))) {
        SetServiceDashboard(true);
        OpenNetworkTrafficMonitors(true, false);
      }
          //!!inventory
          else if (activeMenuItem && inventory.some(v => activeMenuItem.includes(v))) {
            SetServiceDashboard(true);
            setInventory(true);
          }  
      //!!PingTraceSubnets      
       else if (activeMenuItem && PingTraceSubnets.includes(" /"+activeMenuItem)){ //exact match with includes
        SetNetworkTools(true);
        setPingFolder(true);
      } 
      //!! AGNITS
      else if (activeMenuItem && Agnits.some(v => activeMenuItem.includes(v))) {
        SetNetworkTools(true);
        SetAgnits(true);
      }
      //!! F5Tools
      else if (activeMenuItem && F5Tools.some(v => activeMenuItem.includes(v))) {
        SetNetworkTools(true);
        SetF5Tools(true);
      } 
      //!! QIPTools
      else if (activeMenuItem && QIPTools.some(v => activeMenuItem.includes(v))) {
        SetNetworkTools(true);
        SetQipMenu(true);
      } 
      //!! QipReports
      else if (activeMenuItem && QipReports.some(v => activeMenuItem.includes(v))) {
        SetNetworkTools(true);
        SetQipMenu(true);
        SetQipReports(true);
      }
      //!! Compliance
      else if (activeMenuItem && Compliance.includes(activeMenuItem)) { //exact match
          SetNetworkTools(true);
          SetComplianceMenu(true);
      }  
        //!! Servicenow
    else if (activeMenuItem && Servicenow.some(v => activeMenuItem.includes(v))) {
      SetNetworkTools(true);
      SetSnowMenu(true);
    }//!! IctoInfo
    else if (activeMenuItem && IctoInfo.some(v => activeMenuItem.includes(v))) {
      SetNetworkTools(true);
      SetIctoMenu(true);
    }
    //!!M365
    else if (activeMenuItem && M365Monitoring.some(v => activeMenuItem.includes(v))) {
      SetO365Menu(true);
    }   
    //!!IPSLALatency   
    else if (activeMenuItem && IPSLALatency.some(v => activeMenuItem.includes(v))) {
      SetO365Menu(true); 
      SetO36SLA(true);
    }      

    //!!IPSLALatency   
      else if (activeMenuItem && CloudDashboards.some(v => activeMenuItem.includes(v))) {
        setCloudDashboards(true); 
        }      
               
           
          



    //999
    // setTimeout(()=>{

    //   if (menuItemRef.current)
    //   scrollToMenuItem();

    // },500)

    
  },[])

  //======================================

  //--
  const scrollToMenuItem = () => {
    menuItemRef.current?.scrollIntoView({block:'center', inline:'start',  behavior: 'smooth'});
  }
//
function OpenNetworkTrafficMonitors(open: boolean, value: boolean){

  // console.log("is it open", open);
  // console.log("setting the oposite of this", value);
  // if(open) {
  //   //open all children
  //   setWan(true);
  //   setInternet(true);
  //   setMan(true);
  //   setProxy(true);
  // }
  SetNetworkTrafficMonitoring(!value);
}

function BuildMenuItem(label, path) {
  const isActive = activeMenuItem2 === path;

  return (
    <MenuItem  
      style={{
          fontSize:`${13}px`, 
          marginTop: `${mtop}px`, 
          // marginBottom: `${mtop}px` ,
          textDecoration: isActive ? 'underline' : 'none', 
          textUnderlineOffset: isActive ? '3px' : 'none', 
          textDecorationColor: isActive? '#FFFF' : 'initial' ,

          // border: isActive ? '1px solid #FFFFFF' : 'none',
          // borderRadius: isActive ? '12px' : '0',
          // borderBlockWidth : isActive ? '1px': '0',
          // // padding: isActive ? 2: 0

          // textDecorationStyle: isActive ? 'solid' : 'none', 
          // backgroundColor: isActive ? 'linearGradient(180deg, #00AFFF, #0077FF)' : 'initial',
          // boxShadow: isActive ? '0 2px 4px rgba(0,0,0,0.2)': 'none',
          // color: isActive ? '#FFFF' : 'initial',
          // background : 'transparent'
        }}
        active = {isActive}
        onClick={ () => {setActiveMenuItem2(path)}} 
        className="no-icon"
        ref={menuItemRef}
      >

        {label}     
        <Link to={path}   />    
      </MenuItem>   
  )

}

  //---------------------

  return (

    <div className='sidebar-container'>

  <ProSidebar 
  style={{marginTop: '3.8em', marginRight: '1em' }}
  // collapsed={collapsed}  //<<<<<<<<<<this makes the sidebar collapase
  collapsed={commonStore.sideBarCollaped }  //<<<<<<<<<<this makes the sidebar collapase
  breakPoint='sm'
  // 
  >
  <SidebarHeader>
  <div
    style={{
      padding: '12px',
      textTransform: 'uppercase',
      fontWeight: 'bold',
      fontSize: 12,
      letterSpacing: '1px',
      // overflow: 'hidden', //disables the x scrolling
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap',
      overflowY: 'auto',
      maxHeight: 'calc(100vh-60px)'
    }}    
  >
    {/* <Image src={ imageUrl}  avatar spaced='left'  size='mini' /> */}

    {/* <Button  inverted color='teal'  style={{padding :'2px'!}}  size='big' compact  floated='right' onClick={()=>handleClick(!commonStore.sideBarCollaped)}> */}
     {/* <Button.Content > */}

      {!commonStore.sideBarCollaped ? (    
        <Label.Group  color='teal'>
         <Label   onClick={()=>handleClick(!commonStore.sideBarCollaped)} >
         {/* <Button.Content visible > <VscClearAll /> </Button.Content> */}
         {/* <Button.Content visible > <VscClearAll style={{height: '20px', width : '20px'}}/></Button.Content> */}
         <Icon  size='small' name='angle double left' />  <span style={{fontSize : '12px'}} >collapse</span>
         </Label>
         <Label  size='tiny' > Roles: {user?.roles}</Label>
        </Label.Group>  

         )
      :''}
     {/* </Button.Content>    */}
    {/* </Button>   */}

    </div>
  </SidebarHeader>
  <SidebarContent>
    <Menu iconShape='circle'   popperArrow = {false}  >
       {/* =================================Public (Open to everyone)======================================================= */}
    {
      <>

      {/* {RenderMenu()} //!! just testing */}


      <SubMenu  style={{fontSize:`${mrenuSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}}  title="Service Dashboard"  open= {serviceDashboard} onOpenChange= {(open: boolean)=>{   SetServiceDashboard(!serviceDashboard)}}>

          {/* <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}}  title="Network Traffic Monitoring"    className="no-icon" suffix={networkTrafficMonitoring ? angleDown : angleRight} open={networkTrafficMonitoring} onOpenChange= {(open: boolean)=>{ SetNetworkTrafficMonitoring(!networkTrafficMonitoring)}}> */}
          <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px` }}  title="Network Traffic Monitoring"   className="no-icon" suffix={networkTrafficMonitoring ? angleDown : angleRight} open={networkTrafficMonitoring} onOpenChange= {(open: boolean)=>{ OpenNetworkTrafficMonitors(open, networkTrafficMonitoring)}}>

            {isTA && BuildMenuItem("Internet Dashboard", "/InternetDashboard") }
            {BuildMenuItem("Townhall Webcast Servers", "/GlobalTownHallWebcastServers") }
         
            {/* <MenuItem  style={{fontSize:`${13}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px` }} active={activeMenuItem2 == "CloudServeBorderRouters"} onClick={ () => setActiveMenuItem2("CloudServeBorderRouters")}  >CloudServe Border Routers   <Link to="/CloudServeBorderRouters" /></MenuItem>     */}
            {BuildMenuItem("CloudServe Border Routers ", "/CloudServeBorderRouters") }

            <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px` }} title="Internet Links"     className="no-icon" suffix={internet ? angleDown : angleRight} open={internet} onOpenChange= {(open: boolean)=>{ setInternet(!internet)}}>
              {BuildMenuItem("AMER Internet utilization ", "/InternetAmer") }
              {BuildMenuItem("EMEA Internet utilization ", "/InternetEmea") }
              {BuildMenuItem("APAC Internet utilization", "/InternetApac") }
              {BuildMenuItem("CDC Proxy (US) ", "/CDCProxyPerformance") }
              {BuildMenuItem("SLO Proxy (UK) ", "/SLOProxyPerformance") }
              {BuildMenuItem("SIP Proxy (SG)", "/SIPProxyPerformance") }       
            </SubMenu>

            <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="Web Proxies"     className="no-icon" suffix={proxy ? angleDown : angleRight} open={proxy} onOpenChange= {(open: boolean)=>{ setProxy(!proxy)}}>
              {BuildMenuItem("AMER Proxies", "/WebProxiesAMER") } 
              {BuildMenuItem("EMEA Proxies", "/WebProxiesEMEA") } 
              {BuildMenuItem("APAC Proxies", "/WebProxiesAPAC") } 
            </SubMenu>

            <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="SDWAN Links"   className="no-icon" suffix={wan ? angleDown : angleRight} open={wan} onOpenChange= {(open: boolean)=>{ setWan(!wan)}}>
              {BuildMenuItem("AMER SDWAN", "/SdwanAmer") } 
              {BuildMenuItem("EMEA SDWAN ", "/SdwanEmea") } 
              {BuildMenuItem("APAC SDWAN ", "/SdwanApac") } 
            </SubMenu>

            <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="MAN Links"   className="no-icon" suffix={man ? angleDown : angleRight} open={man} onOpenChange=   {(open: boolean)=>{ setMan(!man)}}>
              {BuildMenuItem("AMER CDC-PRI links", "/ManUSCdcPriManLinks") } 
              {BuildMenuItem("EMEA SLO-GSH links", "/ManUKSloGshManLinks") } 
              {BuildMenuItem("APAC-SG JUR-SIP links", "/ManSGSipJurManLinks") } 
              {BuildMenuItem("APAC-JP CCO-IDB links", "/ManJPCcoIdbManLinks") } 
            </SubMenu>
          
          </SubMenu>


          <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="Change Management"   className="no-icon" suffix={zabOpen ? angleDown : angleRight} open={zabOpen} onOpenChange= {(open: boolean)=>{ setZabOopen(!zabOpen)}}>     
            {BuildMenuItem("Notify RFCs", "/NotifyRFCs") } 
            {isAdmin &&  BuildMenuItem("Maintenance Dashboard", "/CheckMaintenanceWindow") } 
            {isTA &&  BuildMenuItem("ImpGroupsMembers", "/ImpGroupsMembers") } 
            {isTA &&  BuildMenuItem("ImpGroupsManagers", "/ImpGroupsManagers") } 
            {/* {isAdmin && <MenuItem  style={{fontSize:`${fsize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} > RFCs Charts<Link to="/RFCsCharts" /></MenuItem> } */}
            {/* {isTA && <MenuItem  style={{fontSize:`${fsize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} > RFCs WOS<Link to="/RFCWOS" /></MenuItem> } */}

          </SubMenu>

          
          <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="F5 Tools"   className="no-icon" suffix={f5Open ? angleDown : angleRight} open={f5Open} onOpenChange= {(open: boolean)=>{ setF5Open(!f5Open)}}>
          {BuildMenuItem("API On-Boarding ", "/F5OnBoarding") } 
          {BuildMenuItem("API Subnet usage", "/F5Subnets") } 
          {BuildMenuItem("Top ICTO usage", "/F5TopICTOsByLtm") } 
          {BuildMenuItem("VS Staus (Offline)", "/F5OfflineByLtm") } 
          {BuildMenuItem("Monthly Stats", "/F5MonthlyStats") } 
          {BuildMenuItem("Search By ICTO", "/F5SearchRFCsDescriptions") }

          </SubMenu>  

          <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="Inventory"   className="no-icon" suffix={inventory ? angleDown : angleRight} open={inventory} onOpenChange= {(open: boolean)=>{ setInventory(!inventory)}}>   
            {BuildMenuItem("Ports & Bandwidth Figures (2022)", "/AgnitsInterfacesInventory") } 
            {BuildMenuItem("Devices Port Utilization", "/DevicesPortUtilization") } 
          </SubMenu>

      </SubMenu>
      </> 
    }      

     {/* ======================================Zabbix Alarms=================================================== */}
     {  isLoggedIn &&  
        <SubMenu  style={{fontSize:`${mrenuSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="Zabbix Alarms"  open={zabbixAlarms}  onOpenChange= {(open: boolean)=>{   SetZabbixAlarms(!zabbixAlarms)}} >
          {BuildMenuItem("Daily Unique Logs", "/ZabbixDailyUniqueLogs") } 
          {BuildMenuItem("Repeat Logs", "/ZabbixRepeatLogs") } 
          {BuildMenuItem("Logs Tracking History", "/LogsTracking") } 
          {  isTA &&      
              <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="Maintenance Windows"   className="no-icon" suffix={zabbixMaintenanceMenu ? angleDown : angleRight} open={zabbixMaintenanceMenu} onOpenChange= {(open: boolean)=>{ SetZbbixMaintenanceMenu(!zabbixMaintenanceMenu)}}>
                {/* <MenuItem  style={{fontSize:`${fsize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} > Week-End RFCs<Link to="/WeekendRFCs" /></MenuItem>  */}
                  {BuildMenuItem("Maintenance Logs", "/MaintenanceLogs") } 
                  {BuildMenuItem("Maintenance By RFC", "/MaintenancewindowByRFC") } 
                  {BuildMenuItem("Live Logs By Devices", "/ZabbixLogsByDevices") } 
                  {BuildMenuItem("Create Maintenance", "/CreateZabbixMaintenanceWindow") } 
              </SubMenu>
          }
        </SubMenu>
     }


     {/* ======================================Cloud Dashboard=================================================== */}
     { isLoggedIn &&  <SubMenu  style={{fontSize:`${mrenuSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="Cloud Dashboard" open= {cloudDashboards} onOpenChange= {()=>{   setCloudDashboards(!cloudDashboards)}}>

        {BuildMenuItem("Azure Circuits", "/AzureCircuits") } 
        {BuildMenuItem("Capacity Management of ECs ", "/CapacityManagementExpressCircuits") } 

      <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="Azure Inventory" className="no-icon"  suffix={azInventory ? angleDown : angleRight} open={azInventory} onOpenChange= {()=>{SetAzInventory(!azInventory)}} >

          {BuildMenuItem("Subscriptions", "/AzureSubscriptions") }  
          {BuildMenuItem("Virtual Machines", "/AzureVirtualMachines") }  
          {BuildMenuItem("VM Scale Sets", "/AzureVMScaleSets") }  
          {BuildMenuItem("VNETs (Subnets)", "/AzureSubnets") }  
          {BuildMenuItem("Routing Tables", "/AzureRoutingTables") }  
          {BuildMenuItem("VNET Gateways", "/AzureVnetGateways") }  
          {BuildMenuItem("VNET Peers" , "/AzureVnetPeers2") }  
          {BuildMenuItem("DNS Private Zones", "/AzureDnsPrivateZones") }  
          {BuildMenuItem("Load Balancers", "/AzureLoadBalancers") }  
          {BuildMenuItem("Private EndPoints", "/AzurePrivateEndPoints") }  
      </SubMenu> 

      {/* <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="Azure OffPrem Monitoring"   className="no-icon" suffix={azOffprem ? angleDown : angleRight} open={azOffprem} onOpenChange= {()=>{SetAzOffprem(!azOffprem)}}>
          {BuildMenuItem("Rest of World", "/AzureOffpremMonitoringRoW") }  
          {BuildMenuItem("CH", "/AzureOffpremMonitoringCH") }  
          {BuildMenuItem("Public Cloud Internet Connection Checks ", "/PublicCloudInternetConnectionChecks") }  
          {BuildMenuItem("GRID Connection Monitors", "/GridConnectionMonitors") }  
                  
      </SubMenu> */}

      <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="Azure OnPrem Monitoring"  className="no-icon" suffix={azOnprem ? angleDown : angleRight} open={azOnprem} onOpenChange= {()=>{SetAzOnprem(!azOnprem)}} >
          {BuildMenuItem("West Europe", "/MonitorWestEurope") }  
          {BuildMenuItem("North Europe", "/MonitorNorthEurope") }  
          {BuildMenuItem("East US ", "/MonitorEastUS") } 
           

          {BuildMenuItem("Central US", "/MonitorCentralUS") }  
          {BuildMenuItem("East Asia", "/MonitorEastAsia") }  
          {BuildMenuItem("South East Asia", "/MonitorSouthEastAsia") }  
          {BuildMenuItem("India", "/MonitorIndia") }  

          {BuildMenuItem("GRID IP SLA from APAC", "/GridVMsIPSLA") }  
          {BuildMenuItem("Cross Sites IP SLA", "/CrossSitesIPSLA") }  
      </SubMenu>


      <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="Azure Logs/Alarms"   className="no-icon" suffix={azAlarms ? angleDown : angleRight}  open={azAlarms} onOpenChange= {()=>{SetAzAlarms(!azAlarms)}}>
      {BuildMenuItem("VWAN Logs", "/AzureVirtualWanLogs") }  
      {BuildMenuItem("Latest Alarms", "/AzureAlarmsLatest") }  
      {BuildMenuItem("Alarms Definition", "/AzureAlarmsDefinition") }  
      {BuildMenuItem("Connection Monitors List", "/AzureAlarmsConnectionMonitors") } 
      </SubMenu>

      <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="Zayo Links"   className="no-icon" suffix={zayoLinks ? angleDown : angleRight} open={zayoLinks} onOpenChange= {()=>{SetZayoLinks(!zayoLinks)}}>
      {BuildMenuItem("Links Inventory", "/ZayoLinks") }  
      {BuildMenuItem("Links Inventory Flat", "/ZayoLinks2") }  
      {BuildMenuItem("Bandwidth Monitoring ", "/ZayoMonitoringOnPrem") }  
        {/* <MenuItem  style={{fontSize:`${fsize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} >  Intf Errors Monitoring <Link to="/ZayoMonitoringOnPrem" /></MenuItem>  */}
      </SubMenu>

      <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="AWS"   className="no-icon" suffix={aws ? angleDown : angleRight} open={aws} onOpenChange= {()=>{SetAws(!aws)}}>
      {BuildMenuItem("Bandwidth Monitoring ", "/AWSOnPremMonitoring") }  
        {/* <MenuItem  style={{fontSize:`${fsize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} >  Intf Errors Monitoring <Link to="/ZayoMonitoringOnPrem" /></MenuItem>  */}
      </SubMenu>      

      {BuildMenuItem("Network Diagrams", "/NeworkDiagrams") }  
      {BuildMenuItem("Thousand Eyes", "/ThousandEyes") }  

      <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} className="no-icon"  title="Top Talkers" >
      {BuildMenuItem("EMEA", "/TopTalkersEMEA") }  
      {BuildMenuItem("AMERICAS", "/TopTalkersAMERICAS") }  
      {BuildMenuItem("Singapore", "/TopTalkersSingapore") }  
      {BuildMenuItem("Hong", "/TopTalkersHongKong") }  
      </SubMenu>

    </SubMenu> 
    }   
     {/* =================================Network Tools======================================================= */}
     { isLoggedIn &&  
     <SubMenu  style={{fontSize:`${mrenuSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="Network Tools"  open= {networkTools}  onOpenChange= {(open: boolean)=>{ SetNetworkTools(!networkTools)}} >
     <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="Diagnostic Tools | Ping, Trace etc."   className="no-icon" suffix={pingFolder ? angleDown : angleRight} open={pingFolder} onOpenChange= {(open: boolean)=>{ setPingFolder(!pingFolder)}}>  
        {BuildMenuItem("Interfaces Stats in Grafana", "/GrafanaInterfaces") } 
        {BuildMenuItem("Devices CPU Stats in Grafana", "/GrafanaHostsCPU") } 
        {BuildMenuItem("Devices Checks in Grafana", "/GrafanaHostsChecks") } 
        {BuildMenuItem("Ping Subnets", "/PingSubnets") } 
        {BuildMenuItem("Ping Hosts", "/PingHosts") } 
        {BuildMenuItem("Single Traceroute", "/Traceroute") } 
        {BuildMenuItem("Multi Traceroute", "/MultiTraceroute") } 
        {BuildMenuItem("Subnet Routing", "/SubnetRoutingChecker") } 
        {BuildMenuItem("Subnet Multi-Check", "/SubnetUnifiedCheck") } 

        {BuildMenuItem("Diff Tool", "/DiffTool") } 
        {isAdmin && BuildMenuItem("Splunk logs", "/SplunkLogs") } 
        {isTA && BuildMenuItem("SysLogs", "/SysLogs") } 
     </SubMenu>




      {  isTA &&    
        <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="Wifi Tools"   className="no-icon" suffix={wifi ? angleDown : angleRight} open={wifi} onOpenChange= {(open: boolean)=>{ SetWifi(!wifi)}}>
          {BuildMenuItem("WiFiClientSessions", "/WiFiClientSessions") }
        </SubMenu>}

        <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="AGNITS"   className="no-icon" suffix={agnits ? angleDown : angleRight} open={agnits} onOpenChange= {(open: boolean)=>{ SetAgnits(!agnits)}}>
              {BuildMenuItem("GetInfoBySwitch", "/NDCRGetInfoBySwitch") } 
              {BuildMenuItem("AGNITS Inventory", "/AgnitsInventory") } 
              {BuildMenuItem("Zabbix Inventory", "/ZabbixInventory") } 
              {BuildMenuItem("Agnits NotFound In Zabbix", "/AgnitsDevicesNotFoundInZabbix") } 
              {BuildMenuItem("Verizon Inventory", "/VerizonInventory") } 
              {BuildMenuItem("SNMP Locations", "/SnmpLocation") } 
              {isAdmin &&
              <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="MariaDB"   className="no-icon" suffix={mariaDB ? angleDown : angleRight} open={mariaDB} onOpenChange= {(open: boolean)=>{ SetMariaDB(!mariaDB)}}>
                {BuildMenuItem("Zabbix Devices", "/agnitsZabbixDevices") } 
                {BuildMenuItem("Zabbix New Devices", "/agnitsZabbixNewDevices") } 
              </SubMenu>
              }

        </SubMenu>

        <SubMenu   style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="Tacacs Tools"   className="no-icon" suffix={splunk ? angleDown : angleRight} open={splunk} onOpenChange= {(open: boolean)=>{ SetSplunk(!splunk)}}>
          {isTA &&  BuildMenuItem("Tacas Logs", "/TacacsLogs") }
            {BuildMenuItem("Cmds logs by Device", "/TacacsLogsByDevice") }
            {BuildMenuItem("Cmds logs by RFC#", "/TacacsLogsByRFC") }

        </SubMenu>
        
        <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="F5 Tools"   className="no-icon" suffix={f5Tools ? angleDown : angleRight} open={f5Tools} onOpenChange= {(open: boolean)=>{ SetF5Tools(!f5Tools)}}>
        {isAdmin && BuildMenuItem("F5 RFCs By Date", "/F5RFCsByDate") }
        {BuildMenuItem("F5 API Logs", "/F5ApiLogs") }
        {isTA && BuildMenuItem("F5 Unclosed RFCs", "/SnowF5UnlclosedRFCs") }
        {BuildMenuItem("F5 Subnets by LB", "/F5GetSubnetsByLB") }
        {BuildMenuItem("Test TCP Connection", "/TestTcpConnection") }
        {BuildMenuItem("F5 LB Nodes ", "/F5Nodes") }
        {BuildMenuItem("GTM Sync Report  ", "/GtmSyncStatus") }
        {BuildMenuItem("GTM WideIP Staus Live", "/GtmSyncStatusLive") }
        {BuildMenuItem("F5 VS", "/F5GetVSByLB") }
        {BuildMenuItem("F5 Pools with 1 member", "/F5GetVSwithSinglePoolMember") }
          {/* <MenuItem  style={{fontSize:`${fsize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} >  Check Routine Template <Link to="/RoutineTemplateCheck" /></MenuItem>  */}
          {/* <MenuItem  style={{fontSize:`${fsize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} >  API RFC failures <Link to="/F5ApiRfcFailures" /></MenuItem>  */}
        </SubMenu>

        <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="QIP"   className="no-icon" suffix={qipMenu ? angleDown : angleRight} open={qipMenu} onOpenChange= {(open: boolean)=>{ SetQipMenu(!qipMenu)}}>
          {isTA && BuildMenuItem("IPAM Unclosed RFCs", "/SnowIPAMUnlclosedRFCs") }
          {BuildMenuItem("Subnet Checker", "/QipChecker1") }
          {BuildMenuItem("Multiple Subnets Checker", "/QipChecker2") }
          {BuildMenuItem("IP2Name", "/QipLookup") }
          {BuildMenuItem("Name2IP", "/QipName2IP") }
   
            <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="Subnet Reports"   className="no-icon" suffix={qipReports ? angleDown : angleRight} open={qipReports} onOpenChange= {(open: boolean)=>{ SetQipReports(!qipReports)}}>
              {BuildMenuItem("QIP vs Netbrain Diff Report", "/QipDiffNetbrain") }
              {BuildMenuItem("QIP Subnets Report !(not working)", "/QipSubnetReport") }
              {BuildMenuItem("D1 Subnet Report", "/DataOneSubnetReport") }
              {isAdmin &&BuildMenuItem("QIP Hosts Report", "/QipHostReport") }         
            </SubMenu>

        </SubMenu>
        
        <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="Compliance/Checks"   className="no-icon" suffix={complianceMenu ? angleDown : angleRight} open={complianceMenu} onOpenChange= {()=>{SetComplianceMenu(!complianceMenu)}}>
          {isTA && BuildMenuItem("Splunk vs AGNITs", "/SplunkAgnits") }
          {isTA && BuildMenuItem("Search Splunk vs AGNITs Logs", "/SearchSplunkAgnits") }
          {isTA && BuildMenuItem("Man/WAN Encryption Report", "/ManWanEncryptionReport") }
          {isAdmin && BuildMenuItem("BT Man Encryption Report", "/ManEncryptionBTReport") }
          {BuildMenuItem("Uptime | Software Status", "/NetbrainUptimes")}
          {BuildMenuItem("N5K Syslog Configs", "/N5KSyslogChecks")}
          {/* {BuildMenuItem("EIGRP Neighbors", "/GetEigrpNeighs")} */}
          {BuildMenuItem("Agora Checks", "/NetbrainAgoraChecks")}
          {BuildMenuItem("CDP Links", "/CdpLinks")}
          {BuildMenuItem("Portfast Checks", "/PortFastChecks")}
          {BuildMenuItem("Telnet Report", "/TelnetReport")}
          {BuildMenuItem("MTU Checks by IP/MAC ", "/NetbrainGetMTU")}
          {BuildMenuItem("MTU Checks by CDP Neighbors", "/NetbrainGetCDPNeighbors")}
          {BuildMenuItem("MTU Checks by Domain", "/NetbrainGetCDPNeighborsByDomain")}

              {/* <SubMenu  style={{fontSize:`${fsize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="QoS"   className="no-icon" suffix={qosMenu ? angleDown : angleRight} open={qosMenu} onOpenChange= {()=>{SetQosMenu(!qosMenu)}}>
                <MenuItem  style={{fontSize:`${fsize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} >  Nexus5K   <Link to="/NetbrainGetMTU" /></MenuItem> 
              </SubMenu>           */}
        </SubMenu>

        <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="Netbrain"   className="no-icon" suffix={netbrainMenu ? angleDown : angleRight} open={netbrainMenu} onOpenChange= {()=>{SetNetbrainMenu(!netbrainMenu)}}>
          {BuildMenuItem("A2B Path", "/NetbrainPathCalculation") } 
          {BuildMenuItem("GetInfo by Switch Name", "/NetbrainSwitchData") } 
          {BuildMenuItem("Switch Mac/Arp Info", "/NetbrainSwitchMacArp") } 
          {BuildMenuItem("GetInfo by IP or Hostname", "/NetbrainGetInfoByIP") } 
          {BuildMenuItem("GetInfo by MAC Address", "/NetbrainGetInfoByMAC") } 
          {BuildMenuItem("GetInfo by Switch Port", "/NetbrainGetInfoBySwitchPort") } 
          {BuildMenuItem("Multiple IP Locator", "/NetbrainIPLocator") } 
          {BuildMenuItem("GetIp by LAN Subnet", "/NetbrainLanSegment") } 
          {BuildMenuItem("Device Config", "/NetbrainShowRun") } 
          {BuildMenuItem("Arp Table ", "/NetbrainArpTable") } 
          {BuildMenuItem("Mac Table ", "/NetbrainMacTable") } 
          {BuildMenuItem("CDP Table", "/NetbrainCdpTable") } 
          {BuildMenuItem("Show Cmds ", "/NetbrainShCmds") } 
          {BuildMenuItem("Device Interfaces", "/NetbrainDeviceInterfaces") } 
          {BuildMenuItem("Backup Config/Cmds ", "/NetbrainDeviceDataBackup") } 
          {BuildMenuItem("Devices Inventory", "/NetbrainAllDevices2") } 
          {BuildMenuItem("IP Inventory", "/NetbrainIpInventory") } 

           {/* <MenuItem  style={{fontSize:`${fsize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`} > PaloAlto NAT IPs<Link to="/NetbrainPaloAltoNattedIPs" /></MenuItem>  */}

            {/* <SubMenu  style={{fontSize:`${fsize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`} title="Show Cmds"   className="no-icon" suffix={qipMenu ? angleDown : angleRight} open={qipMenu} onOpenChange= {(open: boolean)=>{ SetQipMenu(!qipMenu)}}> */}
            {/* <MenuItem  style={{fontSize:`${fsize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`} >Show Cmds<Link to="/NetbrainShCmds" /></MenuItem>   */}
            {/* <MenuItem  style={{fontSize:`${fsize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`} >Configs<Link to="/NetbrainShowRun" /></MenuItem>   */}
            {/* <MenuItem  style={{fontSize:`${fsize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`} >Show Logg<Link to="/NetbrainShowLogg" /></MenuItem>  
              <MenuItem  style={{fontSize:`${fsize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`} >Show Proc Cpu<Link to="/NetbrainShowProcCpu" /></MenuItem>  
              <MenuItem  style={{fontSize:`${fsize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`} >Show Inventory<Link to="/NetbrainShowInventory" /></MenuItem>  
              <MenuItem  style={{fontSize:`${fsize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} >Show Environment<Link to="/NetbrainShowEnv" /></MenuItem>   */}
            {/* </SubMenu>           */}
        </SubMenu>


        <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="ServiceNow"   className="no-icon" suffix={snowMenu ? angleDown : angleRight} open={snowMenu} onOpenChange= {()=>{SetSnowMenu(!snowMenu)}}>
          {BuildMenuItem("Search RFC by dates", "/SnowRfcSearch") } 
          {BuildMenuItem("Search Incidents", "/SnowIncSearch") } 
          {BuildMenuItem("NATS Open Incidents", "/SnowNatsOpenIncs") } 
        </SubMenu>

        <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="ICTO Info"   className="no-icon" suffix={ictoMenu ? angleDown : angleRight} open={ictoMenu} onOpenChange= {()=>{SetIctoMenu(!ictoMenu)}}>
          {BuildMenuItem("PSL info by ICTO#", "/GetPSLInfoByIcto") } 
          {BuildMenuItem("IctoInfo by ICTO#", "/GetIctoInfoById") } 
          {BuildMenuItem("IctoInfo by IP", "/GetIctoInfoByIp") } 
          {BuildMenuItem("IctoSupportInfo by IP", "/GetIctoSupportInfoByIp") } 
          {BuildMenuItem("PSL by IP", "/getPSLInfoByIp") } 
        </SubMenu>


     </SubMenu>
     }

     { isLoggedIn &&  <SubMenu  style={{fontSize:`${mrenuSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="M365 Monitoring Tools" open= {o365Menu} onOpenChange= {(open: boolean)=>{   SetO365Menu(!o365Menu)}}>

          {BuildMenuItem("M365 Dashbaords (external)", "/M365MonitoringDashboards") } 
          {BuildMenuItem("Cloud RFCs", "/CloudRFCs") } 
          {BuildMenuItem("Cloud Incidents", "/CloudIncidents") } 
          {BuildMenuItem("BGP Learnt Routes", "/O365BgpLearntRoutes") } 
          {BuildMenuItem("BGP Peers Route-Maps", "/O365BgpRouteMpas") } 
          {BuildMenuItem("IP SLA Config Parser", "/IpSlaParser") } 

        <SubMenu  style={{fontSize:`${itemSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="IP SLA Latency Dashboards"  className="no-icon" suffix={o365Menu ? angleDown : angleRight} open={o365SLA} onOpenChange= {()=>{SetO36SLA(!o365SLA)}}>
          {BuildMenuItem("APAC", "/O365IPSlaAPAC") } 
          {BuildMenuItem("UK", "/O365IPSlaUK") } 
          {BuildMenuItem("US (work in progress)", "/O365IPSlaUS") }   
        </SubMenu>

     </SubMenu> 
     }

     {/* =================================Admin ======================================================= */}
     {isLoggedIn && isAdmin &&  
        <SubMenu  style={{fontSize:`${mrenuSize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} title="Admin" >
          {BuildMenuItem("User Accounts ", "/accounts") } 
          {BuildMenuItem("User Accounts Table", "/accountsTable") } 
          {BuildMenuItem("Running Jobs", "/jobsDashboard") } 
          {BuildMenuItem("ICTOs Table", "/ictoDashboard") } 
          {BuildMenuItem("Testing Page", "/Testing") } 
        </SubMenu>
      } 
     {/* { isLoggedIn &&  isAdmin && <MenuItem  style={{fontSize:`${fsize}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`}} >SDWAN Logs (Test)<Link to="/SDWANLogs" /></MenuItem> } */}

    </Menu>    
  </SidebarContent>

  <SidebarFooter>
    {/**
     *  You can add a footer for the sidebar ex: copyright
     */}
  </SidebarFooter>
</ProSidebar>

</div>
    );
}
)


export interface menuItem {
  id?: number,
  name: string, 
  path: string,
  open?: boolean ,
  setAction?: (open: boolean) => void,
  children?: menuItem []
}

export interface subMenu {
  menuItems : menuItem[], 
  subMenus?: subMenu []
}
      
    /* <ReactSwitch 
         height={16}
         width={30}
        //  checkedIcon={false}
        //  uncheckedIcon={false}
         onChange={myhandleCollapsedChange}
         checked={collapsed}
        //  onColor="#219de9"
        //  offColor="#bbbbbb"  
        /> */


                  {/* <MenuItem  style={{fontSize:`${13}px`, marginTop: `${mtop}px`, marginBottom: `${mtop}px`,
           textDecoration: activeMenuItem2 == "GlobalTownHallWebcastServers" ? 'underline' : 'none', 
          //  textDecorationColor: activeMenuItem2 == "GlobalTownHallWebcastServers" ? '#FF0000' : 'initial' ,
          //  textDecorationColor: activeMenuItem2 == "GlobalTownHallWebcastServers" ? '#FF0000' : 'initial' ,
           textUnderlineOffset: activeMenuItem2 == "GlobalTownHallWebcastServers" ? '3px' : 'initial' ,
           textDecorationStyle: activeMenuItem2 == "GlobalTownHallWebcastServers" ? 'double' : 'initial' ,
          
          }} 


           active={activeMenuItem2 == "GlobalTownHallWebcastServers"} onClick={ () => setActiveMenuItem2("GlobalTownHallWebcastServers")} >Townhall Webcast Servers    <Link to="/GlobalTownHallWebcastServers"/>
           </MenuItem>     */}
